Processes have their own seperate address space. And when a child process is created using fork(), a new process is created at new address space. When child process is created, vis fork(), it gets isolated from the parent process and has seperate data members (copied from the parent process, right from the state parent has them at the point of fork() call). 
In the given code for process demonstration, fork() create the child and it is executed first which print the linearly decreasing value of global variable. It control returns to parent and it prints the linearly increasing value of global variable (which is at the original state i.e.10) as child only changes its own seperate value of global variable.

Threads are created within a process and don't have different address space. Rather they have different call stacks in the same address space. Multiple threads are able to execute concurrently. When a new thread is created it starts executing with data left at the same state by the main thread. There are continuous switchs between child thread and the main thread and both operate on the same data, modified by the other thread.

In the question-1, there is a difference in the ouput of both the parts. Because in part-1 the processes, child and parent, execute on differemt data in differnt address space. So the child process first decreases the global variable from 10 to -90. An then the parent executes and increases the variable from 10 to 100.
Whereas, in part-2 the main thread executes first and increases the global variable from 10 to 100. Then the child thread exceutes and decreases the global variable from 100 to -90. This happens as both the threads operate on the same memory space and both have access to modify the same global variable.

**During testing on my device, in part-2 the threads certain times switched and which gave output in which main thread executes to some step then child thread executes to some step so on. First the main thread increases from 10 to 54 (this number varied) then child thread decreases from 54 to -90. Then main increases from -90 to 100.
This happens as the threads might switch at certain points of execution. And the other thread continuing right from where the pareviously executing thread left.
